# django importsfrom django.db.models.query import QuerySetfrom django.shortcuts import renderfrom django.contrib.auth.forms import UserCreationFormfrom django.http import HttpResponse,JsonResponsefrom django.shortcuts import get_object_or_404from django.http import Http404from rest_framework import authenticationfrom rest_framework import permissionsfrom django.contrib.auth.models import User# rest_framework importsfrom rest_framework.views import APIViewfrom rest_framework.response import Responsefrom rest_framework import serializers, statusfrom rest_framework.authentication import SessionAuthentication, BasicAuthenticationfrom rest_framework.permissions import IsAuthenticatedfrom rest_framework import viewsets# shops database importsfrom database.models import *# serializers importsfrom .serializers import *# Create your views here.class apiOverview(APIView):    def get(self, req):        if req.method == "GET":            data = {                'channel':'/users/..',                'List':'/product-list/',                'Detail View':'/product-detail/<str:pk>/',                # 'Create':'/product-create/',                # 'Update':'/product-update/<str:pk>/',                # 'Delete':'/product-delete/<str:pk>/',            }            return Response(data=data,status=status.HTTP_200_OK)        else:            return Response(status=status.HTTP_400_BAD_REQUEST)class productList(APIView):    def get(self, req):        if req.method == "GET":            products = Product.objects.all()            serializer = ProductSerializer(products,many=True)            return Response(data=serializer.data,status=status.HTTP_200_OK)        else:            return Response(status=status.HTTP_400_BAD_REQUEST)class productDetail(APIView):    def get(self, req, pk):        if req.method == "GET":            product = get_object_or_404(Product,id=pk)            serializer = ProductSerializer(product,many=False)            return Response(data=serializer.data,status=status.HTTP_200_OK)        else:            return Response(status=status.HTTP_400_BAD_REQUEST)class productQueryCategory(APIView):    def get(self, req, name):        if req.method == "GET":            product = Product.objects.filter(category=name)            serializer = ProductSerializer(product,many=True)            return Response(data=serializer.data,status=status.HTTP_200_OK)        else:            return Response(status=status.HTTP_400_BAD_REQUEST)class productQueryShop(APIView):    def get(self, req, name):        if req.method == "GET":            product = Product.objects.filter(shop=name)            serializer = ProductSerializer(product,many=True)            return Response(data=serializer.data,status=status.HTTP_200_OK)        else:            return Response(status=status.HTTP_400_BAD_REQUEST)class shoppingCacheList(APIView):    authentication_classes = [SessionAuthentication, BasicAuthentication]    permission_classes = [IsAuthenticated]    def get(self, req):        if req.method == "GET":                        data = shoppingCache.objects.get(user=req.user)            serializer = ShoppingCacheSerializer(data,many=False)            return Response(data=serializer.data,status=status.HTTP_200_OK)        else:            return Response(status=status.HTTP_400_BAD_REQUEST)class purchaseList(APIView):    authentication_classes = [SessionAuthentication, BasicAuthentication]    permission_classes = [IsAuthenticated]    def get(self, req):        if req.method == "GET":                        data = Order.objects.filter(user=req.user)            serializer = purchaseSerializer(data,many=True)                        return Response(data=serializer.data,status=status.HTTP_200_OK)        else:            return Response(status.HTTP_400_BAD_REQUEST)class purchaseCreate(APIView):    authentication_classes = [SessionAuthentication, BasicAuthentication]    permission_classes = [IsAuthenticated]    def post(self, req):        if req.method == "POST":            product = get_object_or_404(Product,id=req.data['product'])            try:                new_order = Order.objects.create(user=req.user,product=product,note=req.data['note'])                new_order.save()                return Response(data={"detail": "purchase successful"},status=status.HTTP_200_OK)            except:                            return Response(data={"detail": "an error occured"},status=status.HTTP_400_BAD_REQUEST)        else:            return Response(status=status.HTTP_400_BAD_REQUEST)